// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: flowcenter.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowCenterClient is the client API for FlowCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowCenterClient interface {
	// Flow node server poll flows from flow center.
	// Report the current flow nodes in the current flow node server,
	// and get the next nodes of them.
	Poll(ctx context.Context, in *FlowPollRequest, opts ...grpc.CallOption) (*FlowPollResponse, error)
}

type flowCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowCenterClient(cc grpc.ClientConnInterface) FlowCenterClient {
	return &flowCenterClient{cc}
}

func (c *flowCenterClient) Poll(ctx context.Context, in *FlowPollRequest, opts ...grpc.CallOption) (*FlowPollResponse, error) {
	out := new(FlowPollResponse)
	err := c.cc.Invoke(ctx, "/flowcenter.FlowCenter/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowCenterServer is the server API for FlowCenter service.
// All implementations must embed UnimplementedFlowCenterServer
// for forward compatibility
type FlowCenterServer interface {
	// Flow node server poll flows from flow center.
	// Report the current flow nodes in the current flow node server,
	// and get the next nodes of them.
	Poll(context.Context, *FlowPollRequest) (*FlowPollResponse, error)
	mustEmbedUnimplementedFlowCenterServer()
}

// UnimplementedFlowCenterServer must be embedded to have forward compatible implementations.
type UnimplementedFlowCenterServer struct {
}

func (UnimplementedFlowCenterServer) Poll(context.Context, *FlowPollRequest) (*FlowPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (UnimplementedFlowCenterServer) mustEmbedUnimplementedFlowCenterServer() {}

// UnsafeFlowCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowCenterServer will
// result in compilation errors.
type UnsafeFlowCenterServer interface {
	mustEmbedUnimplementedFlowCenterServer()
}

func RegisterFlowCenterServer(s grpc.ServiceRegistrar, srv FlowCenterServer) {
	s.RegisterService(&FlowCenter_ServiceDesc, srv)
}

func _FlowCenter_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowCenterServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowcenter.FlowCenter/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowCenterServer).Poll(ctx, req.(*FlowPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowCenter_ServiceDesc is the grpc.ServiceDesc for FlowCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flowcenter.FlowCenter",
	HandlerType: (*FlowCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poll",
			Handler:    _FlowCenter_Poll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flowcenter.proto",
}

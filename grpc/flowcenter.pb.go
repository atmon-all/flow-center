// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0--rc2
// source: flowcenter.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flow poll request.
type FlowPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flow nodes in the current node server.
	Nodes []*FlowNode `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *FlowPollRequest) Reset() {
	*x = FlowPollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowcenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPollRequest) ProtoMessage() {}

func (x *FlowPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flowcenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPollRequest.ProtoReflect.Descriptor instead.
func (*FlowPollRequest) Descriptor() ([]byte, []int) {
	return file_flowcenter_proto_rawDescGZIP(), []int{0}
}

func (x *FlowPollRequest) GetNodes() []*FlowNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Flow poll response.
type FlowPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Responsed code from flow center.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Responsed message from flow center.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Flow node info with next node.
	Nodes []*FlowNode `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *FlowPollResponse) Reset() {
	*x = FlowPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowcenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPollResponse) ProtoMessage() {}

func (x *FlowPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flowcenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPollResponse.ProtoReflect.Descriptor instead.
func (*FlowPollResponse) Descriptor() ([]byte, []int) {
	return file_flowcenter_proto_rawDescGZIP(), []int{1}
}

func (x *FlowPollResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FlowPollResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FlowPollResponse) GetNodes() []*FlowNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Flow node task.
type FlowNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flow node server IP.
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Flow node server port.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Flow node server type, values are 'Golang','Java' or 'NodeJS'.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Flow ID of the node.
	FlowId string `protobuf:"bytes,4,opt,name=flowId,proto3" json:"flowId,omitempty"`
	// Flow node ID of the flow.
	NodeId string `protobuf:"bytes,5,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// Next flow nodes of curren flow node.
	// As the next node can be spreaded in multi node server,
	// the next node is a list. Node server will find next node by some strategies.
	Next []*FlowNode `protobuf:"bytes,6,rep,name=next,proto3" json:"next,omitempty"`
}

func (x *FlowNode) Reset() {
	*x = FlowNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowcenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowNode) ProtoMessage() {}

func (x *FlowNode) ProtoReflect() protoreflect.Message {
	mi := &file_flowcenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowNode.ProtoReflect.Descriptor instead.
func (*FlowNode) Descriptor() ([]byte, []int) {
	return file_flowcenter_proto_rawDescGZIP(), []int{2}
}

func (x *FlowNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *FlowNode) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FlowNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FlowNode) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *FlowNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *FlowNode) GetNext() []*FlowNode {
	if x != nil {
		return x.Next
	}
	return nil
}

var File_flowcenter_proto protoreflect.FileDescriptor

var file_flowcenter_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3d,
	0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x6c, 0x0a,
	0x10, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x08,
	0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x32, 0x51, 0x0a, 0x0a, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c,
	0x12, 0x1b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x40, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x74, 0x6d, 0x6f, 0x6e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x50, 0x01, 0x5a, 0x20, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x74, 0x6d, 0x6f, 0x6d, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flowcenter_proto_rawDescOnce sync.Once
	file_flowcenter_proto_rawDescData = file_flowcenter_proto_rawDesc
)

func file_flowcenter_proto_rawDescGZIP() []byte {
	file_flowcenter_proto_rawDescOnce.Do(func() {
		file_flowcenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_flowcenter_proto_rawDescData)
	})
	return file_flowcenter_proto_rawDescData
}

var file_flowcenter_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_flowcenter_proto_goTypes = []interface{}{
	(*FlowPollRequest)(nil),  // 0: flowcenter.FlowPollRequest
	(*FlowPollResponse)(nil), // 1: flowcenter.FlowPollResponse
	(*FlowNode)(nil),         // 2: flowcenter.FlowNode
}
var file_flowcenter_proto_depIdxs = []int32{
	2, // 0: flowcenter.FlowPollRequest.nodes:type_name -> flowcenter.FlowNode
	2, // 1: flowcenter.FlowPollResponse.nodes:type_name -> flowcenter.FlowNode
	2, // 2: flowcenter.FlowNode.next:type_name -> flowcenter.FlowNode
	0, // 3: flowcenter.FlowCenter.Poll:input_type -> flowcenter.FlowPollRequest
	1, // 4: flowcenter.FlowCenter.Poll:output_type -> flowcenter.FlowPollResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_flowcenter_proto_init() }
func file_flowcenter_proto_init() {
	if File_flowcenter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flowcenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowPollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowcenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowcenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flowcenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flowcenter_proto_goTypes,
		DependencyIndexes: file_flowcenter_proto_depIdxs,
		MessageInfos:      file_flowcenter_proto_msgTypes,
	}.Build()
	File_flowcenter_proto = out.File
	file_flowcenter_proto_rawDesc = nil
	file_flowcenter_proto_goTypes = nil
	file_flowcenter_proto_depIdxs = nil
}
